{
  "name": "UI Designer Claude Orchestrator",
  "version": "1.0.0",
  "description": "Multi-agent UI/UX design orchestration system with vibe design methodology",
  "orchestrator": {
    "type": "ui-designer",
    "parallel_agents": 5,
    "default_timeout": 30000,
    "memory_enabled": true
  },
  "design_config": {
    "framework": "tailwind",
    "icon_library": "lucide-react",
    "color_mode": ["light", "dark"],
    "breakpoints": {
      "mobile": "320px",
      "tablet": "768px",
      "desktop": "1024px",
      "wide": "1200px"
    },
    "default_tokens": {
      "spacing_unit": "4px",
      "border_radius": "8px",
      "font_scale": 1.25,
      "animation_duration": "200ms"
    }
  },
  "specialists": {
    "design_analyst": {
      "enabled": true,
      "capabilities": ["visual_dna_extraction", "pattern_recognition", "style_analysis"]
    },
    "style_guide_expert": {
      "enabled": true,
      "capabilities": ["token_generation", "system_creation", "consistency_validation"]
    },
    "ui_generator": {
      "enabled": true,
      "capabilities": ["component_creation", "screen_design", "responsive_layout"]
    },
    "ux_researcher": {
      "enabled": true,
      "capabilities": ["persona_creation", "journey_mapping", "usability_testing"]
    },
    "brand_strategist": {
      "enabled": true,
      "capabilities": ["identity_development", "messaging", "emotional_design"]
    },
    "accessibility_auditor": {
      "enabled": true,
      "capabilities": ["wcag_compliance", "screen_reader_testing", "inclusive_design"]
    }
  },
  "workflows": {
    "complete_ui_project": {
      "stages": ["research", "concept", "design", "iterate", "deliver"],
      "parallel_execution": true
    },
    "design_sprint": {
      "duration_days": 5,
      "daily_goals": ["understand", "diverge", "decide", "prototype", "test"]
    },
    "brand_identity": {
      "deliverables": ["logo", "color_palette", "typography", "guidelines", "applications"]
    },
    "optimization_cycle": {
      "metrics": ["performance", "accessibility", "usability", "conversion"]
    }
  },
  "memory": {
    "persist_preferences": true,
    "store_decisions": true,
    "track_iterations": true,
    "export_format": "json"
  },
  "output": {
    "formats": ["html", "jsx", "vue", "svelte"],
    "include_tokens": true,
    "generate_docs": true,
    "export_assets": true
  },
  "integrations": {
    "figma": {
      "enabled": false,
      "export_ready": true
    },
    "github": {
      "enabled": true,
      "branch_per_variation": true
    },
    "storybook": {
      "enabled": false,
      "auto_stories": true
    }
  },
  "quality_checks": {
    "accessibility": {
      "level": "AAA",
      "automated_testing": true
    },
    "performance": {
      "lighthouse_threshold": 90,
      "bundle_size_limit": "150kb"
    },
    "consistency": {
      "token_validation": true,
      "style_linting": true
    }
  },
  "hooks": {
    "PreToolUse": [
      {
        "name": "metaclaude-permission-validation",
        "script": ".claude/hooks/metaclaude/boundaries/validate-permissions.sh",
        "enabled": true,
        "description": "Validates agent operations against the MetaClaude permission matrix",
        "env_mapping": {
          "METACLAUDE_AGENT_TYPE": "${AGENT_TYPE}",
          "METACLAUDE_OPERATION": "tool:${TOOL_NAME}",
          "METACLAUDE_RESOURCE": "${TOOL_PARAMS}"
        }
      },
      {
        "name": "metaclaude-content-deduplication",
        "matcher": "Write|Edit",
        "hooks": [{
          "type": "command",
          "command": "${HOME}/.claude/hooks/metaclaude/content/dedup-check.sh",
          "description": "Validates content before Write/Edit operations to prevent redundancy"
        }]
      },
      {
        "name": "metaclaude-tool-matrix-enforcement",
        "script": ".claude/hooks/metaclaude/tools/enforce-matrix.sh",
        "enabled": true,
        "description": "Enforces tool-usage-matrix.md rules before tool execution",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "CONTEXT": "${CONTEXT}",
          "USER_REQUEST": "${USER_REQUEST}"
        }
      },
      {
        "name": "metaclaude-role-enforcement",
        "script": ".claude/hooks/metaclaude/coordination/role-enforcer.sh",
        "enabled": true,
        "description": "Enforces agent role boundaries and delegation requirements",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "TOOL_ARGS": "${TOOL_PARAMS}",
          "AGENT_TYPE": "${AGENT_TYPE}",
          "AGENT_ID": "${AGENT_ID}"
        }
      }
    ],
    "PostToolUse": [
      {
        "name": "metaclaude-handoff-tracking",
        "script": ".claude/hooks/metaclaude/boundaries/track-handoff.sh",
        "enabled": true,
        "description": "Tracks cross-agent handoffs and communications",
        "when": "agent_handoff"
      },
      {
        "name": "metaclaude-tool-usage-tracking",
        "script": ".claude/hooks/metaclaude/tools/track-usage.sh",
        "enabled": true,
        "description": "Records all tool usage patterns for analysis and learning",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "TOOL_PARAMS": "${TOOL_PARAMS}",
          "TOOL_RESULT": "${TOOL_RESULT}",
          "EXECUTION_TIME": "${EXECUTION_TIME}",
          "AGENT_TYPE": "${AGENT_TYPE}"
        }
      },
      {
        "name": "metaclaude-tool-validation",
        "script": ".claude/hooks/metaclaude/tools/enforce-matrix.sh",
        "enabled": true,
        "description": "Validates tool usage against tool-usage-matrix.md rules",
        "when": "always",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "CONTEXT": "${CONTEXT}",
          "USER_REQUEST": "${USER_REQUEST}"
        }
      },
      {
        "name": "metaclaude-broadcast-system",
        "script": ".claude/hooks/metaclaude/coordination/broadcast.sh",
        "enabled": true,
        "description": "Broadcasts tool usage to subscribed agents for coordination",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "TOOL_OUTPUT": "${TOOL_RESULT}",
          "AGENT_TYPE": "${AGENT_TYPE}",
          "AGENT_ID": "${AGENT_ID}"
        }
      },
      {
        "name": "metaclaude-conflict-detection",
        "script": ".claude/hooks/metaclaude/coordination/detect-conflicts.sh",
        "enabled": true,
        "description": "Detects resource conflicts and task collisions between agents",
        "env_mapping": {
          "TOOL_NAME": "${TOOL_NAME}",
          "TOOL_ARGS": "${TOOL_PARAMS}",
          "AGENT_ID": "${AGENT_ID}"
        }
      }
    ],
    "PreAgentSpawn": [
      {
        "name": "metaclaude-agent-boundary-check",
        "script": ".claude/hooks/metaclaude/boundaries/validate-permissions.sh",
        "enabled": true,
        "description": "Validates agent spawning permissions",
        "env_mapping": {
          "METACLAUDE_AGENT_TYPE": "${SPAWNING_AGENT}",
          "METACLAUDE_OPERATION": "agent:spawn",
          "METACLAUDE_RESOURCE": "${NEW_AGENT_TYPE}"
        }
      }
    ]
  }
}